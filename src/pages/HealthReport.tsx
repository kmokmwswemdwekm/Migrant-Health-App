import React, { useState, useEffect } from 'react';
import { 
  Row, Col, Card, Button, Alert, Badge, ListGroup 
} from 'react-bootstrap';
import { 
  FileText, Download, QrCode, User, Phone, Calendar,
  Activity, CheckCircle, Clock, Users, Shield
} from 'lucide-react';
import { useAuth } from '../context/AuthContext';
import { useTranslation } from '../context/LanguageContext';
import QRCode from 'react-qr-code';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

interface HealthReport {
  user: {
    name: string;
    phone: string;
    verificationStatus: string;
    qrCode: string;
  };
  tests: Array<{
    id: string;
    test_type: string;
    scheduled_date: string;
    status: string;
    results?: string;
    doctor_name?: string;
    hospital_name?: string;
  }>;
  familyMembers: Array<{
    id: string;
    name: string;
    relationship: string;
  }>;
  generatedAt: string;
}

function HealthReport() {
  const { user } = useAuth();
  const { t } = useTranslation();
  const [healthReport, setHealthReport] = useState<HealthReport | null>(null);
  const [loading, setLoading] = useState(true);
  const [generating, setGenerating] = useState(false);
  const [showQR, setShowQR] = useState(false);

  useEffect(() => {
    fetchHealthReport();
  }, []);

  const fetchHealthReport = async () => {
    try {
      const token = localStorage.getItem('healthcareToken');
      const response = await fetch('/api/users/health-report', {
        headers: { 'Authorization': `Bearer ${token}` }
      });

      if (response.ok) {
        const data = await response.json();
        setHealthReport(data.healthReport);
      }
    } catch (error) {
      console.error('Fetch health report error:', error);
    } finally {
      setLoading(false);
    }
  };

  const generatePDFReport = async () => {
    if (!healthReport) return;

    setGenerating(true);

    try {
      // Create a temporary div with the report content
      const reportElement = document.getElementById('health-report-content');
      if (!reportElement) {
        throw new Error('Report content not found');
      }

      // Capture the element as canvas
      const canvas = await html2canvas(reportElement, {
        scale: 2,
        useCORS: true,
        allowTaint: true
      });

      // Create PDF
      const pdf = new jsPDF('p', 'mm', 'a4');
      const imgWidth = 210;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;

      pdf.addImage(canvas.toDataURL('image/png'), 'PNG', 0, 0, imgWidth, imgHeight);
      
      // Add footer
      pdf.setFontSize(8);
      pdf.setTextColor(128, 128, 128);
      pdf.text('Generated by Kerala Healthcare Management System', 15, pdf.internal.pageSize.height - 10);
      pdf.text(`Generated on: ${new Date().toLocaleString()}`, 15, pdf.internal.pageSize.height - 5);

      // Save the PDF
      pdf.save(`Health_Report_${healthReport.user.name.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`);

    } catch (error) {
      console.error('PDF generation error:', error);
      alert('Failed to generate PDF. Please try again.');
    } finally {
      setGenerating(false);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'success';
      case 'scheduled': return 'primary';
      case 'missed': return 'danger';
      case 'rescheduled': return 'warning';
      default: return 'secondary';
    }
  };

  if (loading) {
    return (
      <div className="text-center py-5">
        <div className="spinner-border text-primary" role="status">
          <span className="visually-hidden">Loading...</span>
        </div>
      </div>
    );
  }

  if (!healthReport) {
    return (
      <Alert variant="danger">
        Failed to load health report. Please try again.
      </Alert>
    );
  }

  return (
    <div className="health-report-page">
      {/* Header */}
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div>
          <h2 className="text-dark fw-bold mb-1">
            <FileText size={32} className="me-2 text-info" />
            {t('healthReport')}
          </h2>
          <p className="text-muted mb-0">
            Comprehensive health summary and records
          </p>
        </div>
        <div className="d-flex gap-2">
          <Button
            variant="outline-info"
            onClick={() => setShowQR(!showQR)}
            className="d-flex align-items-center"
          >
            <QrCode size={18} className="me-2" />
            QR Code
          </Button>
          <Button
            variant="primary"
            onClick={generatePDFReport}
            disabled={generating}
            className="d-flex align-items-center"
          >
            <Download size={18} className="me-2" />
            {generating ? 'Generating...' : 'Download PDF'}
          </Button>
        </div>
      </div>

      {/* QR Code Display */}
      {showQR && user?.qrCode && (
        <Row className="mb-4">
          <Col md={6} lg={4}>
            <Card className="border-info">
              <Card.Body className="text-center">
                <div className="p-3 bg-white rounded">
                  <QRCode value={user.qrCode} size={200} />
                </div>
                <h6 className="mt-3 text-info">Health Report QR Code</h6>
                <p className="small text-muted">
                  Show this to healthcare providers for instant access
                </p>
              </Card.Body>
            </Card>
          </Col>
        </Row>
      )}

      {/* Health Report Content */}
      <div id="health-report-content">
        <Row>
          {/* Personal Information */}
          <Col lg={4} className="mb-4">
            <Card className="border-0 shadow-sm h-100">
              <Card.Header className="bg-info text-white">
                <h5 className="mb-0 d-flex align-items-center">
                  <User size={20} className="me-2" />
                  Personal Information
                </h5>
              </Card.Header>
              <Card.Body>
                <div className="mb-3">
                  <strong className="text-muted small">Full Name</strong>
                  <div className="h6">{healthReport.user.name}</div>
                </div>
                
                <div className="mb-3">
                  <strong className="text-muted small">Phone Number</strong>
                  <div className="d-flex align-items-center">
                    <Phone size={16} className="me-2" />
                    {healthReport.user.phone}
                  </div>
                </div>
                
                <div className="mb-3">
                  <strong className="text-muted small">Verification Status</strong>
                  <div>
                    <Badge 
                      bg={healthReport.user.verificationStatus === 'verified' ? 'success' : 'warning'}
                      className="d-flex align-items-center w-fit"
                    >
                      <Shield size={14} className="me-1" />
                      {healthReport.user.verificationStatus === 'verified' ? 'Verified' : 'Pending'}
                    </Badge>
                  </div>
                </div>

                <div className="mb-3">
                  <strong className="text-muted small">Report Generated</strong>
                  <div className="d-flex align-items-center small">
                    <Calendar size={14} className="me-2" />
                    {new Date(healthReport.generatedAt).toLocaleString()}
                  </div>
                </div>
              </Card.Body>
            </Card>
          </Col>

          {/* Test Summary */}
          <Col lg={4} className="mb-4">
            <Card className="border-0 shadow-sm h-100">
              <Card.Header className="bg-primary text-white">
                <h5 className="mb-0 d-flex align-items-center">
                  <Activity size={20} className="me-2" />
                  Test Summary
                </h5>
              </Card.Header>
              <Card.Body>
                <div className="row g-3 mb-4">
                  <div className="col-6">
                    <div className="text-center p-3 bg-success bg-opacity-10 rounded">
                      <div className="h4 text-success mb-0">
                        {healthReport.tests.filter(test => test.status === 'completed').length}
                      </div>
                      <small className="text-muted">Completed</small>
                    </div>
                  </div>
                  <div className="col-6">
                    <div className="text-center p-3 bg-primary bg-opacity-10 rounded">
                      <div className="h4 text-primary mb-0">
                        {healthReport.tests.filter(test => test.status === 'scheduled').length}
                      </div>
                      <small className="text-muted">Scheduled</small>
                    </div>
                  </div>
                </div>

                <div className="mb-3">
                  <strong className="text-muted small">Recent Tests</strong>
                  {healthReport.tests.slice(0, 3).map((test) => (
                    <div key={test.id} className="d-flex justify-content-between align-items-center py-2 border-bottom">
                      <div>
                        <div className="small fw-semibold">{test.test_type}</div>
                        <div className="text-muted" style={{ fontSize: '0.75rem' }}>
                          {new Date(test.scheduled_date).toLocaleDateString()}
                        </div>
                      </div>
                      <Badge bg={getStatusColor(test.status)} className="rounded-pill">
                        {test.status}
                      </Badge>
                    </div>
                  ))}
                </div>
              </Card.Body>
            </Card>
          </Col>

          {/* Family Members */}
          <Col lg={4} className="mb-4">
            <Card className="border-0 shadow-sm h-100">
              <Card.Header className="bg-success text-white">
                <h5 className="mb-0 d-flex align-items-center">
                  <Users size={20} className="me-2" />
                  Family Members
                </h5>
              </Card.Header>
              <Card.Body>
                <div className="text-center mb-3">
                  <div className="h4 text-success mb-0">
                    {healthReport.familyMembers.length}
                  </div>
                  <small className="text-muted">Registered Members</small>
                </div>

                {healthReport.familyMembers.length > 0 ? (
                  <div>
                    {healthReport.familyMembers.map((member) => (
                      <div key={member.id} className="d-flex align-items-center py-2 border-bottom">
                        <div className="bg-success bg-opacity-10 rounded-circle p-2 me-3">
                          <User size={16} className="text-success" />
                        </div>
                        <div>
                          <div className="small fw-semibold">{member.name}</div>
                          <div className="text-muted" style={{ fontSize: '0.75rem' }}>
                            {member.relationship}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center text-muted py-3">
                    <Users size={32} className="opacity-50 mb-2" />
                    <div className="small">No family members added</div>
                  </div>
                )}
              </Card.Body>
            </Card>
          </Col>
        </Row>

        {/* Detailed Test History */}
        <Row>
          <Col xs={12}>
            <Card className="border-0 shadow-sm">
              <Card.Header className="bg-light border-0">
                <h5 className="mb-0 d-flex align-items-center">
                  <FileText size={20} className="me-2 text-dark" />
                  Detailed Test History
                </h5>
              </Card.Header>
              <Card.Body className="p-0">
                {healthReport.tests.length > 0 ? (
                  <ListGroup variant="flush">
                    {healthReport.tests.map((test) => (
                      <ListGroup.Item key={test.id} className="py-3">
                        <div className="d-flex justify-content-between align-items-start">
                          <div className="flex-grow-1">
                            <div className="d-flex align-items-center mb-2">
                              <h6 className="mb-0 me-3">{test.test_type}</h6>
                              <Badge bg={getStatusColor(test.status)} className="rounded-pill">
                                {test.status}
                              </Badge>
                            </div>
                            
                            <div className="row g-2 text-muted small">
                              <div className="col-auto">
                                <Calendar size={14} className="me-1" />
                                {new Date(test.scheduled_date).toLocaleDateString()}
                              </div>
                              {test.doctor_name && (
                                <div className="col-auto">
                                  <User size={14} className="me-1" />
                                  Dr. {test.doctor_name}
                                </div>
                              )}
                              {test.hospital_name && (
                                <div className="col-auto">
                                  <Activity size={14} className="me-1" />
                                  {test.hospital_name}
                                </div>
                              )}
                            </div>
                            
                            {test.results && (
                              <div className="mt-2">
                                <Badge bg="success" className="me-2">
                                  <CheckCircle size={12} className="me-1" />
                                  Results Available
                                </Badge>
                              </div>
                            )}
                          </div>
                          
                          {test.status === 'completed' && (
                            <CheckCircle size={20} className="text-success" />
                          )}
                          {test.status === 'scheduled' && (
                            <Clock size={20} className="text-primary" />
                          )}
                        </div>
                      </ListGroup.Item>
                    ))}
                  </ListGroup>
                ) : (
                  <div className="text-center py-5">
                    <FileText size={48} className="text-muted opacity-50 mb-3" />
                    <h6 className="text-muted">No Test History</h6>
                    <p className="text-muted small">
                      Your completed and scheduled tests will appear here
                    </p>
                  </div>
                )}
              </Card.Body>
            </Card>
          </Col>
        </Row>
      </div>

      {/* Footer Information */}
      <div className="mt-4 p-3 bg-light rounded text-center">
        <p className="small text-muted mb-1">
          This report is generated by the Kerala Healthcare Management System
        </p>
        <p className="small text-muted mb-0">
          For any questions or concerns, contact your healthcare provider
        </p>
      </div>
    </div>
  );
}

export default HealthReport;